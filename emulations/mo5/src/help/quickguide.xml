<?xml version="1.0"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xi="http://www.w3.org/2001/XInclude" xsi:schemaLocation="http://docbook.org/xml/5.0/xsd/docbook.xsd">
  <title>Quick reference guide to BASIC 1.0</title>
  <info>
    <title>Quick reference guide to BASIC 1.0</title>
    <author>
      <firstname>S&#xF8;ren</firstname>
      <surname>Roug</surname>
    </author>
    <abstract>
      <para>
BASIC 1.0 is the standard BASIC language for Thomson computers (MO5, TO7, etc.),
which is the reference for the entire range.
This is an implementation of Microsoft BASIC (BASIC-69). On the MO5, the
instruction set is reduced and the double precision is not implemented,
so that the interpreter fits in only 12 KB of ROM, instead of 16 KB on the TO7.
      </para>
    </abstract>
  </info>
  <section>
    <title>Variable types</title>
    <informaltable border="1" frame="all" rules="all">
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Range</th>
      </tr>
      <tr>
        <td>Integer</td>
        <td>AB%</td>
        <td>-32768 to +32767</td>
      </tr>
      <tr>
        <td>Real</td>
        <td>AB</td>
        <td>+/- 9.99999 E +38</td>
      </tr>
      <tr>
        <td>String</td>
        <td>AB$</td>
        <td>0 to 255 characters</td>
      </tr>
    </informaltable>
    <para>
Where A must be a letter, B and following (up to 255) characters are optional and may be a letter or digit.
Only the first 15 characters are significant.
</para>
  </section>
  <section>
    <title>Operators</title>
    <informaltable border="1" frame="all" rules="all">
      <tr>
        <th>Symbol</th>
        <th>Operation</th>
      </tr>
      <tr>
        <td>( )</td>
        <td>Grouping</td>
      </tr>
      <tr>
        <td>-</td>
        <td>Negation</td>
      </tr>
      <tr>
        <td>^</td>
        <td>Exponentiation</td>
      </tr>
      <tr>
        <td>* /</td>
        <td>Multiplication (*) and division (/)</td>
      </tr>
      <tr>
        <td>@ MOD</td>
        <td>Integer division (@) and modulus (MOD)</td>
      </tr>
      <tr>
        <td>+ -</td>
        <td>Addition and subtraction</td>
      </tr>
      <tr>
        <td>&gt; &lt; = &lt;&gt; &gt;= &lt;=</td>
        <td>Relational operators</td>
      </tr>
      <tr>
        <td>NOT AND EQV IMP OR XOR</td>
        <td>Logical operators</td>
      </tr>
    </informaltable>
    <section>
      <title>Logical operator truth table</title>
      <informaltable border="1" frame="all" rules="all">
        <col align="right"/>
        <col align="right"/>
        <col align="right"/>
        <col align="right"/>
        <col align="right"/>
        <col align="right"/>
        <col align="right"/>
        <thead>
          <tr>
            <th>A</th>
            <th>B</th>
            <th>A AND B</th>
            <th>A EQV B</th>
            <th>A IMP B</th>
            <th>A OR B</th>
            <th>A XOR B</th>
          </tr>
        </thead>
        <tr>
          <td>0</td>
          <td>0</td>
          <td>0</td>
          <td>-1</td>
          <td>-1</td>
          <td>0</td>
          <td>0</td>
        </tr>
        <tr>
          <td>0</td>
          <td>-1</td>
          <td>0</td>
          <td>0</td>
          <td>-1</td>
          <td>-1</td>
          <td>-1</td>
        </tr>
        <tr>
          <td>-1</td>
          <td>0</td>
          <td>0</td>
          <td>0</td>
          <td>0</td>
          <td>-1</td>
          <td>-1</td>
        </tr>
        <tr>
          <td>-1</td>
          <td>-1</td>
          <td>-1</td>
          <td>-1</td>
          <td>-1</td>
          <td>-1</td>
          <td>0</td>
        </tr>
      </informaltable>
    </section>
  </section>
  <section>
    <title>System commands</title>
    <variablelist>
      <varlistentry>
        <term>CONT<indexterm><primary>CONT</primary></indexterm></term>
        <listitem>
          <para>Continues program execution after a STOP statement or pressing the STOP key.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>DELETE<indexterm><primary>DELETE</primary></indexterm></term>
        <listitem>
          <para>Deletes program lines.</para>
          <simplelist columns="1">
            <member>DELETE 100-350</member>
            <member>DELETE 10-</member>
            <member>DELETE -80</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>LIST<indexterm><primary>LIST</primary></indexterm></term>
        <listitem>
          <para>Displays all or specified lines of the program currently in memory.
          By default, LIST displays its output on the screen, but a device can be specified.
          </para>
          <simplelist columns="1">
            <member>LIST</member>
            <member>LIST 10-95</member>
            <member>LIST -200</member>
            <member>LIST "LPRT:(80)" - Prints program in 80 column mode.</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>MERGE <optional><replaceable>file</replaceable><optional>,R</optional></optional>
        <indexterm><primary>MERGE</primary></indexterm></term>
        <listitem>
          <para>Merges the BASIC program on tape or disk with program in memory. Runs program if <code>,R</code> is given</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>NEW
        <indexterm><primary>NEW</primary></indexterm>
        </term>
        <listitem>
          <para>Clears program from memory.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>RUN<indexterm><primary>RUN</primary></indexterm></term>
        <listitem>
          <para>Executes a program starting at lowest line, specified line or loads program from tape to run. Closes all files unless <code>,R</code> is given.</para>
          <simplelist columns="1">
            <member>RUN</member>
            <member>RUN 250</member>
            <member>RUN "startrek"</member>
            <member>RUN "format",R</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>TRON/TROFF
        <indexterm><primary>TRON</primary></indexterm>
        <indexterm><primary>TROFF</primary></indexterm></term>
        <listitem>
          <para>Turns on/off program flow trace.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>BASIC language statements</title>
    <variablelist>
      <varlistentry>
        <term>ATTRB <replaceable>X,Y</replaceable>
        <indexterm><primary>ATTRB</primary></indexterm></term>
        <listitem>
          <para>Defines the height and width of the characters. The possible values are 0 and 1.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>CLEAR <replaceable>I</replaceable><optional>,<replaceable>J</replaceable><optional><replaceable>,K</replaceable></optional></optional>
          <indexterm><primary>CLEAR</primary></indexterm></term>
        <listitem>
          <para>Erases all variables and reserves space for string storage, highest address for BASIC and graphical characters.</para>
          <simplelist columns="1">
            <member>CLEAR 500</member>
            <member>CLEAR 200,25000</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>CLS<indexterm><primary>CLS</primary></indexterm></term>
        <listitem>
          <para>Clears display</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>CONSOLE <replaceable>top,bottom</replaceable>
        <indexterm><primary>CONSOLE</primary></indexterm></term>
        <listitem>
          <para>Reserves the lines between top and bottom for text.</para>
          <simplelist columns="1">
            <member>CONSOLE 5,15</member>
            <member>CONSOLE 0,24</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>DATA<indexterm><primary>DATA</primary></indexterm></term>
        <listitem>
          <para>Stores data in program for use by READ statement</para>
          <simplelist>
            <member>DATA January, 31, "Martian History Month".</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>DEFINT/DEFSNG/DEFSTR <replaceable>A</replaceable>
        <optional>,<replaceable>B</replaceable>...</optional>
        <indexterm><primary>DEFINT</primary></indexterm>
        <indexterm><primary>DEFSNG</primary></indexterm>
        <indexterm><primary>DEFSTR</primary></indexterm>
        </term>
        <listitem>
          <para>
          Sets the type that is assumed if no type character (% or $) is specified when a variable name is used. The statement sets the default type for variables starting with a letter from the ranges specified. DEFINT defines an integer, DEFSNG defines a REAL. DEFSTR defines a string variable.
          </para>
          <simplelist columns="1">
            <member>DEFINT A-B,O-Q defines all variables starting with A,B,O,P and Q as integer</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>DIM  <replaceable>VARNAME</replaceable>(<replaceable>SIZE 1</replaceable><optional>,<replaceable>SIZE2</replaceable>...</optional>)
            <indexterm><primary>DIM</primary></indexterm></term>
        <listitem>
          <para>Dimensions one or more arrays.</para>
          <simplelist>
            <member>DIM X(40),A$(7,6),B(10,2)</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>END
        <indexterm><primary>END</primary></indexterm></term>
        <listitem>
          <para>Terminates program execution.
              This statement is not required at the end of a program because control flow will end automatically there.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ERL, ERR
        <indexterm><primary>ERL</primary></indexterm>
        <indexterm><primary>ERR</primary></indexterm></term>
        <listitem>
          <para>When an error has occurred, the function ERR gives the code number and ERL gives the line number in which the
error occurred.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ERROR <replaceable>N</replaceable>
        <indexterm><primary>ERROR</primary></indexterm></term>
        <listitem>
          <para>Makes it possible to simulate error number <replaceable>N</replaceable>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>EXEC <replaceable>address</replaceable>
        <indexterm><primary>EXEC</primary></indexterm></term>
        <listitem>
          <para>Transfers control to machine language programs at <replaceable>address</replaceable>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>FOR <replaceable>VARNAME</replaceable> = <replaceable>START</replaceable>
              TO <replaceable>END</replaceable>
              <optional>STEP <replaceable>INCREMENT</replaceable></optional>
          <indexterm><primary>FOR</primary></indexterm>
          <indexterm><primary>TO</primary></indexterm>
          <indexterm><primary>STEP</primary></indexterm>
          </term>
        <listitem>
          <para>Creates a program loop which is executed, for specified range of values, STEP indicates the increment. If STEP omitted, one is used.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>GOSUB
        <indexterm><primary>GOSUB</primary></indexterm>
        </term>
        <listitem>
          <para>Calls subroutine beginning at specified line number.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>GOTO
        <indexterm><primary>GOTO</primary></indexterm>
        </term>
        <listitem>
          <para>Causes immediate program branch to specified line number.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>IF <replaceable>condition</replaceable>
              THEN <replaceable>action 1</replaceable> ELSE <replaceable>action 2</replaceable>
              <indexterm><primary>IF</primary></indexterm>
              <indexterm><primary>THEN</primary></indexterm>
              <indexterm><primary>ELSE</primary></indexterm>
              </term>
        <listitem>
          <para>Tests condition. If true performs action 1 and jumps to next line, if false performs action 2.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>INPUT <optional><replaceable>PROMPT</replaceable>;</optional> <replaceable>VAR1</replaceable>, <replaceable>VAR2</replaceable>
        <indexterm><primary>INPUT</primary></indexterm>
        </term>
        <listitem>
          <para>Causes program to halt for entry from keyboard.
              The optional prompt string is followed by a question mark and a space. The user may then enter a series of values separated by commas.
          </para>
          <simplelist columns="1">
            <member>INPUT"ENTER NAME";N$</member>
            <member>INPUT A,B,C,D</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>LET <replaceable>VAR</replaceable> = <replaceable>EXPR</replaceable> </term>
        <listitem>
          <para>
              Assigns value to variable. LET is not implemented. Use implied assignment.
          </para>
          <simplelist columns="1">
            <member>A=42</member>
            <member>Hw$="HELLO WORLD"</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>LINE INPUT
        <indexterm><primary>LINE INPUT</primary></indexterm></term>
        <listitem>
          <para>Allows input of line from keyboard, including commas. Line is terminated by [ENTER].</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>LOCATE <replaceable>I,J,K</replaceable>
        <indexterm><primary>LOCATE</primary></indexterm>
        </term>
        <listitem>
          <para>Place the cursor at location <replaceable>I,J</replaceable></para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>NEXT <optional><replaceable>VARNAME</replaceable></optional>
          <indexterm><primary>NEXT</primary></indexterm>
          </term>
        <listitem>
          <para>Returns control to a FOR statement to determine whether the loop should be repeated.
              If the termination condition has not been met, control will proceed with the line following the FOR statement. If the termination condition has been met, control will proceed with the statement following the NEXT.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ON <replaceable>EXPR</replaceable> GOSUB
            <replaceable>LABEL1</replaceable><optional>,<replaceable>LABEL2</replaceable>...</optional>
        <indexterm><primary>ON</primary></indexterm>
        <indexterm><primary>GOSUB</primary></indexterm></term>
        <listitem>
          <para>
              Multiway branch to specified lines.
              Upon encountering a RETURN statement, control will return to the statement following the ON GOSUB.
              The value of <replaceable>EXPR</replaceable> is rounded up or down to the nearest integer, and is used as an index into the list of labels, starting with 1.
                If the index is less than 1 or greater than the number of labels, control falls through to the next statement.
</para>
          <simplelist columns="1">
            <member>ON I GOSUB 100,200,300</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ON <replaceable>EXPR</replaceable> GOTO
              <replaceable>LABEL1</replaceable><optional>,<replaceable>LABEL2</replaceable>...</optional>
        <indexterm><primary>ON</primary></indexterm>
        <indexterm><primary>GOTO</primary></indexterm>
        </term>
        <listitem>
          <para>
                Multiway branch to specified lines. The value of <replaceable>EXPR</replaceable> is rounded up or down to the nearest integer, and is used as an index into the list of labels, starting with 1.
                If the index is less than 1 or greater than the number of labels, control falls through to the next statement.
            </para>
          <simplelist columns="1">
            <member>ON K GOTO 245,187,310</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ON ERROR GOTO
        <indexterm><primary>ON</primary></indexterm>
        <indexterm><primary>ERROR</primary></indexterm>
        <indexterm><primary>GOTO</primary></indexterm>
        </term>
        <listitem>
          <para>Directs control to the specified line if a subsequent error is detected.</para>
          <simplelist columns="1">
            <member>ON ERROR GOTO 5000</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>POKE <replaceable>location,value</replaceable>
        <indexterm><primary>POKE</primary></indexterm>
        </term>
        <listitem>
          <para>Places value in specified memory location. Value must be 0 - 255.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>PRINT <optional><replaceable>EXPR1</replaceable><optional>;|,</optional><replaceable>EXPR2</replaceable><optional>;|,</optional>...</optional>
        <indexterm><primary>PRINT</primary></indexterm>
        <indexterm><primary>?</primary></indexterm>
        </term>
        <listitem>
          <para>
              Prints content of following list on screen. Expressions can be ended with semicolons, commas or nothing.
              Comma causes tab to next 12 column print zone. Semicolon holds print head position. '?' is a synonym for PRINT.
          </para>
          <simplelist columns="1">
            <member>PRINT"THE ANSWER"</member>
            <member>PRINT A,B</member>
            <member>PRINT "YOU'VE HAD";T;"TRIES"</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>PRINT TAB(<replaceable>X</replaceable>)
        <indexterm><primary>PRINT</primary></indexterm>
        <indexterm><primary>TAB</primary></indexterm>
        </term>
        <listitem>
          <para>Moves the cursor to the position given in <replaceable>X</replaceable>. If the cursor is already past, then moves to next line first.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>PRINT USING
        <indexterm><primary>PRINT</primary></indexterm>
        <indexterm><primary>USING</primary></indexterm>
        </term>
        <listitem>
          <para>Prints output in specified format.</para>
          <simplelist columns="1">
            <member># number field</member>
            <member>$ dollar sign in front of number.</member>
            <member>* fills leading spaces with asterisks.</member>
            <member>^ prints in exponential format.</member>
            <member>+ causes sign to be printed.</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>READ <replaceable>VAR1</replaceable><optional>,<replaceable>VAR2</replaceable>...</optional>
        <indexterm><primary>READ</primary></indexterm>
        </term>
        <listitem>
          <para>Assigns the next item in a DATA statement to specified variable.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>REM <replaceable>TEXT</replaceable>
        <indexterm><primary>REM</primary></indexterm>
        <indexterm><primary>'</primary></indexterm>
        </term>
        <listitem>
          <para>Allows comments to be inserted in a program. Everything in a line following REM is ignored.
              The quote (') is a synonym for REM.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>RESTORE <optional><replaceable>LABEL</replaceable></optional>
        <indexterm><primary>RESTORE</primary></indexterm>
        </term>
        <listitem>
          <para>Resets the data pointer back to the first item in the first DATA statement or the statement at the specified line number.
              </para>
          <simplelist columns="1">
            <member>RESTORE</member>
            <member>RESTORE 200</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>RESUME
        <indexterm><primary>RESUME</primary></indexterm>
        </term>
        <listitem>
          <para>Return to the main program after execution of error subroutine.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>RETURN
        <indexterm><primary>RETURN</primary></indexterm>
        </term>
        <listitem>
          <para>Returns the program from subroutine to the statement following GOSUB.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>STOP
        <indexterm><primary>STOP</primary></indexterm>
        </term>
        <listitem>
          <para>Halts execution of program at line containing STOP.
              Variables are not cleared, so that they can be inspected for debugging purpose.
              Use CONT to continue execution.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>String functions</title>
    <variablelist>
      <varlistentry>
        <term>ASC(<replaceable>X$</replaceable>)</term>
        <listitem>
          <para>Returns ASCII code of first character in string</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>CHR$(<replaceable>N</replaceable>)</term>
        <listitem>
          <para>Returns character for specified ASCII code value.</para>
          <simplelist columns="1">
            <member>A$ = CHR$(93)</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>INKEY$</term>
        <listitem>
          <para>Checks keyboard and returns key being pressed. If no key is pressed then returns the empty string.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>INSTR(<replaceable>N</replaceable>,<replaceable>X$</replaceable>,<replaceable>Y$</replaceable>)</term>
        <listitem>
          <para>Searches for first occurrence of target string <replaceable>Y$</replaceable> at a position <replaceable>N</replaceable>.
              Returns position of match.</para>
          <simplelist columns="1">
            <member>P = INSTR(8,A$,"TED")</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>LEFT$(<replaceable>X$</replaceable>,<replaceable>N</replaceable>)</term>
        <listitem>
          <para>Returns the first <replaceable>N</replaceable> characters of string <replaceable>X$</replaceable>.</para>
          <simplelist columns="1">
            <member>B$ = LEFT(A$,9)</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>LEN(<replaceable>X$</replaceable>)</term>
        <listitem>
          <para>Returns the length of string <replaceable>X$</replaceable>.</para>
          <simplelist columns="1">
            <member>K = LEN(K$)</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>MID$(<replaceable>X$</replaceable>,
            <replaceable>N</replaceable><optional>,<replaceable>M</replaceable></optional>)</term>
        <listitem>
          <para>Returns substring of <replaceable>X$</replaceable> of length <replaceable>M</replaceable>, starting from position <replaceable>N</replaceable>. If <replaceable>M</replaceable> is missing, then substring from <replaceable>N</replaceable> to end is returned.
</para>
          <simplelist columns="1">
            <member>B$ = MID$(A$,4,1)</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>RIGHT(<replaceable>X$</replaceable>,<replaceable>N</replaceable>)</term>
        <listitem>
          <para>Return the last <replaceable>N</replaceable> characters of string <replaceable>X$</replaceable>.
</para>
          <simplelist columns="1">
            <member>B$ = RIGHT(A$,9)</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>STR$(<replaceable>N</replaceable>)</term>
        <listitem>
          <para>Converts <replaceable>N</replaceable> to its string representation.</para>
          <simplelist columns="1">
            <member>X$ = STR$(14.4)</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>VAL(<replaceable>X$</replaceable>)</term>
        <listitem>
          <para>Converts numeric characters of <replaceable>X$</replaceable> to a number.</para>
          <simplelist columns="1">
            <member>P = VAL(D$)</member>
          </simplelist>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>Numeric functions</title>
    <variablelist>
      <varlistentry>
        <term>ABS(<replaceable>X</replaceable>)
        <indexterm><primary>ABS</primary></indexterm>
        </term>
        <listitem>
          <para>Computes absolute value of argument.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>COS(<replaceable>X</replaceable>)
        <indexterm><primary>COS</primary></indexterm>
        </term>
        <listitem>
          <para>Returns cosine of angle given in radians.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>CSRLIN
        <indexterm><primary>CSRLIN</primary></indexterm>
        </term>
        <listitem>
          <para>Return the line the cursor is at.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>EXP(<replaceable>X</replaceable>)
        <indexterm><primary>EXP</primary></indexterm>
        </term>
        <listitem>
          <para>Returns exponential of number.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>FIX(<replaceable>X</replaceable>)
        <indexterm><primary>FIX</primary></indexterm>
        </term>
        <listitem>
          <para>Returns truncated value.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>FRE(0)/FRE(<replaceable>A$</replaceable>)
        <indexterm><primary>FRE</primary></indexterm>
        </term>
        <listitem>
          <para>Returns the amount of memory available for programs or strings.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>INT(<replaceable>X</replaceable>)
        <indexterm><primary>INT</primary></indexterm>
        </term>
        <listitem>
          <para>Converts number to integer.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>LOG(<replaceable>X</replaceable>)
        <indexterm><primary>LOG</primary></indexterm>
        </term>
        <listitem>
          <para>Returns natural logarithm of argument.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>PEEK(<replaceable>X</replaceable>)
        <indexterm><primary>PEEK</primary></indexterm>
        </term>
        <listitem>
          <para>Returns content of specified memory location X.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>POS(<replaceable>D</replaceable>)
        <indexterm><primary>POS</primary></indexterm>
        </term>
        <listitem>
          <para>Returns the horizontal position of the cursor of device <replaceable>D</replaceable>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>RND<optional>(<replaceable>X</replaceable>)</optional>
        <indexterm><primary>RND</primary></indexterm>
        </term>
        <listitem><para>Generates random number between 0 and 1. If <replaceable>X</replaceable> is negative, then seeds the random number generator.</para>
          Pseudorandom number generator. The behavior is different depending on the value passed. If the value is positive, the result will be a new random value between 0 and 1 (including 0 but not 1). If the value is zero, the result will be a repeat of the last random number generated. If the value is negative, it will be used to reseed the random number generator. Pseudorandom sequences can be repeated by reseeding with the same number.         
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>SGN(<replaceable>X</replaceable>)
        <indexterm><primary>SGN</primary></indexterm>
        </term>
        <listitem>
          <para>Returns sign of number as: 1 positive, 0 zero, -1 negative.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>SIN(<replaceable>X</replaceable>)
        <indexterm><primary>SIN</primary></indexterm>
        </term>
        <listitem>
          <para>Returns sine of angle given in radians.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>SPC(<replaceable>X</replaceable>)
        <indexterm><primary>SPC</primary></indexterm>
        </term>
        <listitem>
          <para>Writes <replaceable>X</replaceable> spaces.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>SQR(<replaceable>X</replaceable>)
        <indexterm><primary>SQR</primary></indexterm>
        </term>
        <listitem>
          <para>Returns square root of number. Argument must be non-negative.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>TAN(<replaceable>X</replaceable>)
        <indexterm><primary>TAN</primary></indexterm>
        </term>
        <listitem>
          <para>Returns tangent of angle given in radians.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>VARPTR(<replaceable>X</replaceable>)
        <indexterm><primary>VARPTR</primary></indexterm>
        </term>
        <listitem>
          <para>Returns address of pointer to specified variable.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>I/O control statements</title>
    <variablelist>
      <varlistentry>
        <term>CLOSE
        <indexterm><primary>CLOSE</primary></indexterm>
        </term>
        <listitem>
          <para>Closes open files.</para>
          <simplelist columns="1">
            <member>CLOSE 1,3</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>EOF(<replaceable>channel</replaceable>)
        <indexterm><primary>EOF</primary></indexterm></term>
        <listitem>
          <para>Returns -1 if end of file has been reached</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>INPUT #<replaceable>CHANNEL</replaceable>
        <indexterm><primary>INPUT</primary></indexterm></term>
        <listitem>
          <para>Read from file opened with OPEN.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>LINE INPUT #<replaceable>CHANNEL</replaceable>
        <indexterm><primary>LINE INPUT</primary></indexterm>
        </term>
        <listitem>
          <para>Allows input of line from open file, including commas. Line is terminated by [ENTER].</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>LOAD
        <indexterm><primary>LOAD</primary></indexterm></term>
        <listitem>
          <para>Load program file from tape. First file encountered will be loaded, unless program name is specified.</para>
          <simplelist columns="1">
            <member>LOAD</member>
            <member>LOAD "NAME"</member>
            <member>LOAD "NAME",R</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>LOADM
        <indexterm><primary>LOADM</primary></indexterm>
        </term>
        <listitem>
          <para>Load machine language program from tape. Offset to loading address main be given.</para>
          <simplelist columns="1">
            <member>LOADM</member>
            <member>LOADM"NAME"</member>
            <member>LOADM"NAME",&amp;H6000</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>MOTORON/MOTOROFF
        <indexterm><primary>MOTORON</primary></indexterm>
        <indexterm><primary>MOTOROFF</primary></indexterm>
        </term>
        <listitem>
          <para>Turns tape motor on/off.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>OPEN <replaceable>A</replaceable>,#<replaceable>CHANNEL</replaceable>,<replaceable>FILENAME</replaceable>
        <indexterm><primary>OPEN</primary></indexterm>
        </term>
        <listitem>
          <para>Opens a file or device. The argument <replaceable>A</replaceable> must be either "I" for input or "O" for output. <replaceable>CHANNEL</replaceable> must be between 1 and 16.
The <replaceable>FILENAME</replaceable> specifies device
("KYBD:" - keyboard, "SCRN:" - screen, "LPRT:" - line printer, "CASS:" - cassette tape) and if relevant, a file name on the device.
Device defaults to CASS:.
</para>
          <simplelist columns="1">
            <member>OPEN "I", #1, "CASS : FILE.TWO"</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>PRINT #<replaceable>CHANNEL</replaceable>
        <indexterm><primary>PRINT</primary></indexterm></term>
        <listitem>
          <para>Prints content of following list to the specified file.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>PRINT #<replaceable>CHANNEL</replaceable> USING
        <indexterm><primary>PRINT</primary></indexterm>
        <indexterm><primary>USING</primary></indexterm>
        </term>
        <listitem>
          <para>Prints formatted output to the specified file.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>SAVE
        <indexterm><primary>SAVE</primary></indexterm>
        </term>
        <listitem>
          <para>Transfer BASIC programs from memory to tape.</para>
          <simplelist columns="1">
            <member>SAVE "prog"</member>
            <member>SAVE "prog",A</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>SAVEM
        <indexterm><primary>SAVEM</primary></indexterm>
        </term>
        <listitem>
          <para>Transfer machine code to tape.</para>
          <simplelist columns="1">
            <member>SAVEM "codefile",&amp;H6200,&amp;H7520,&amp;H6210</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>SKIPF
        <indexterm><primary>SKIPF</primary></indexterm>
        </term>
        <listitem>
          <para>Skips to end of specified program on tape.</para>
          <simplelist columns="1">
            <member>SKIPF</member>
            <member>SKIPF"NAME"</member>
          </simplelist>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>Graphics statements</title>
    <variablelist>
      <varlistentry>
        <term>BOX(<replaceable>X1,Y1</replaceable>)-(<replaceable>X2,Y2</replaceable>),C
        <indexterm><primary>BOX</primary></indexterm>
        </term>
        <listitem>
          <para>Draws a box with corners at (X1,Y1) to (X2,Y2) in colour C.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>BOXF(<replaceable>X1,Y1</replaceable>)-(<replaceable>X2,Y2</replaceable>),<replaceable>C</replaceable>
        <indexterm><primary>BOXF</primary></indexterm>
        </term>
        <listitem>
          <para>Draws a filled box with corners at (X1,Y1) to (X2,Y2) in colour C.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>COLOR <replaceable>foreground,background,invert</replaceable>
        <indexterm><primary>COLOR</primary></indexterm>
        </term>
        <listitem>
          <para>Sets foreground and background colours. If <replaceable>invert</replaceable> is given then foreground and background are swapped.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>DEFGR$(<replaceable>N</replaceable>)
        <indexterm><primary>DEFGR$</primary></indexterm>
        </term>
        <listitem>
          <para>Define a graphics character. N must be from 0 to 127.</para>
          <simplelist columns="1">
            <member>DEFGR$(0) = 24,24,255,24,60,36,36,36</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>LINE(<replaceable>X1,Y1</replaceable>)-(<replaceable>X2,Y2</replaceable>),<replaceable>C</replaceable>
        <indexterm><primary>LINE</primary></indexterm>
        </term>
        <listitem>
          <para>Draws a line from (X1,Y1) to (X2,Y2) in colour <replaceable>C</replaceable>.</para>
          <simplelist columns="1">
            <member>LINE (100,100)-(300,150),2</member>
            <member>LINE -(0,150),2</member>
            <member>LINE (0,10)-(30,10) "+",3,0</member>
          </simplelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>POINT(<replaceable>X,Y</replaceable>)
        <indexterm><primary>POINT</primary></indexterm>
        </term>
        <listitem>
          <para>Returns the color of the foreground if the pixel is set, otherwise the background.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>PSET(<replaceable>X,Y</replaceable>),<replaceable>C</replaceable>
        <indexterm><primary>PSET</primary></indexterm>
        </term>
        <listitem>
          <para>Sets point X,Y to colour C. If C is positive, the pixel colour is set, otherwise the background colour.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>SCREEN <replaceable>foreground,background,border</replaceable>
        <indexterm><primary>SCREEN</primary></indexterm>
        </term>
        <listitem>
          <para>Sets the colour scheme for the whole screen.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>SCREENPRINT
        <indexterm><primary>SCREENPRINT</primary></indexterm>
        </term>
        <listitem>
          <para>Prints the content of the screen.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>Sound generation statements</title>
    <variablelist>
      <varlistentry>
        <term>BEEP
        <indexterm><primary>BEEP</primary></indexterm>
        </term>
        <listitem>
          <para>Sounds a "beep".</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>PLAY <replaceable>string</replaceable>
        <indexterm><primary>PLAY</primary></indexterm>
        </term>
        <listitem>
          <para>Plays music string made of following:</para>
          <simplelist columns="1">
            <member>DO, RE, MI, FA, SO, LA, SI - note</member>
            <member>O<replaceable>n</replaceable> - octave, n=1 to 5</member>
            <member>A<replaceable>n</replaceable> - attack, n=0 to 255</member>
            <member>L<replaceable>n</replaceable> - note length, n=1 to 96</member>
            <member>P<replaceable>n</replaceable> - pause, n=1 to 255</member>
            <member>T<replaceable>n</replaceable> - temp, n=1 to 255</member>
            <member>Also allows sharps (#) or flats (b).</member>
          </simplelist>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>Lightpen statements</title>
    <variablelist>
      <varlistentry>
        <term>INPEN <replaceable>X,Y</replaceable>
        <indexterm><primary>INPEN</primary></indexterm>
        </term>
        <listitem>
          <para>Reads the X,Y coordinate of the lightpen. X,Y are set to -1 if the lightpen is not detected.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>INPUTPEN <replaceable>X,Y</replaceable>
        <indexterm><primary>INPUTPEN</primary></indexterm>
        </term>
        <listitem>
          <para>Reads the X,Y coordinate of the lightpen at the time the lightpen button is pressed. X,Y are set to -1 if the lightpen is not detected.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>PTRIG
        <indexterm><primary>PTRIG</primary></indexterm>
        </term>
        <listitem>
          <para>This function indicates the state of the lightpen interrupt.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>TUNE
        <indexterm><primary>TUNE</primary></indexterm>
        </term>
        <listitem>
          <para>For tuning the lightpen</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>Keyboard mapping</title>
    <informaltable frame="all" colsep="1" rowsep="0">
      <tgroup cols="3">
        <colspec colwidth="1.1in" colname="c1"/>
        <colspec colwidth="1in" colname="c2"/>
        <colspec colwidth="1in" colname="c3"/>
        <thead>
          <row>
            <entry>PC key</entry>
            <entry>NORMAL</entry>
            <entry>BASIC</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <keycap>Pause/Break</keycap>
            </entry>
            <entry>
              <keycap>STOP</keycap>
            </entry>
            <entry>INSTR</entry>
          </row>
          <row>
            <entry>
              <keycap>Home</keycap>
            </entry>
            <entry>
              <keycap>BACK</keycap>
            </entry>
            <entry>MERGE</entry>
          </row>
          <row>
            <entry>
              <keycap>Delete</keycap>
            </entry>
            <entry>
              <keycap>EFF</keycap>
            </entry>
            <entry>SAVE</entry>
          </row>
          <row>
            <entry>
              <keycap>Insert</keycap>
            </entry>
            <entry>
              <keycap>INS</keycap>
            </entry>
            <entry/>
          </row>
          <row>
            <entry>
              <keycap>Control</keycap>
            </entry>
            <entry>
              <keycap>CNT</keycap>
            </entry>
            <entry/>
          </row>
          <row>
            <entry>
              <keycap>Escape</keycap>
            </entry>
            <entry>
              <keycap>RAZ</keycap>
            </entry>
            <entry>CLS</entry>
          </row>
          <row>
            <entry><keycap>SHIFT</keycap> (left)</entry>
            <entry>
              <keycap>SHIFT</keycap>
            </entry>
            <entry/>
          </row>
          <row>
            <entry><keycap>SHIFT</keycap> (right)</entry>
            <entry>
              <keycap>BASIC</keycap>
            </entry>
            <entry/>
          </row>
          <row>
            <entry>
              <keycap>F11</keycap>
            </entry>
            <entry>
              <keycap>ACC</keycap>
            </entry>
            <entry>INKEY$</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </section>
  <section>
    <title>Error codes</title>
    <informaltable border="1" frame="all" rules="all">
      <tr>
        <th>Number</th>
        <th>Code</th>
        <th>Explanation</th>
      </tr>
      <tr>
        <td>1</td>
        <td>NF</td>
        <td>NEXT without FOR. Usually occurs when NEXT statements are reversed in a nested loop.</td>
      </tr>
      <tr>
        <td>2</td>
        <td>SN</td>
        <td>Syntax Error. Usually caused by typing errors or incorrect punctuation.</td>
      </tr>
      <tr>
        <td>3</td>
        <td>RG</td>
        <td>RETURN without GOSUB. Program has most likely fallen through the end of the routine, (use END) or a branch has been made into the subroutine.</td>
      </tr>
      <tr>
        <td>4</td>
        <td>OD</td>
        <td>Out of Data. A READ statement has read all the DATA statements.</td>
      </tr>
      <tr>
        <td>5</td>
        <td>FC</td>
        <td>Illegal Function Call. Usually parameter is out of range or the wrong variable type.</td>
      </tr>
      <tr>
        <td>6</td>
        <td>OV</td>
        <td>Overflow. The number is too large for the computer to handle.</td>
      </tr>
      <tr>
        <td>7</td>
        <td>OM</td>
        <td>Out of Memory. All available memory is being used or has been reserved.</td>
      </tr>
      <tr>
        <td>8</td>
        <td>UL</td>
        <td>Undefined Line. A branching statement has been directed to a line that does not exist.</td>
      </tr>
      <tr>
        <td>9</td>
        <td>BS</td>
        <td>Bad Subscript. Usually because the value of subscript is greater than the declared dimension of the array.</td>
      </tr>
      <tr>
        <td>10</td>
        <td>DD</td>
        <td>Attempt to redimension an array. Arrays can only be dimensioned once in a program.</td>
      </tr>
      <tr>
        <td>11</td>
        <td>/0</td>
        <td>Division by zero. Not possible.</td>
      </tr>
      <tr>
        <td>12</td>
        <td>ID</td>
        <td>Illegal Direct Statement. Attempt to use a statement which can only be used in a program e.g. INPUT.</td>
      </tr>
      <tr>
        <td>13</td>
        <td>TM</td>
        <td>Type Mismatch. Attempt to assign string data to numeric variable or vice versa.</td>
      </tr>
      <tr>
        <td>14</td>
        <td>OS</td>
        <td>Out of String Space. Use CLEAR to create more space if available.</td>
      </tr>
      <tr>
        <td>15</td>
        <td>LS</td>
        <td>String too long. Maximum is 255 characters.</td>
      </tr>
      <tr>
        <td>16</td>
        <td>ST</td>
        <td>String formula too complex. Break the operation into smaller steps.</td>
      </tr>
      <tr>
        <td>17</td>
        <td>CN</td>
        <td>Can't Continue. Trying to use CONT when at END of a program.</td>
      </tr>
      <tr>
        <td>18</td>
        <td>UF</td>
        <td>Undefined User Function.</td>
      </tr>
      <tr>
        <td>19</td>
        <td>NR</td>
        <td>No RESUME. The RESUME instruction is required if an ON ERROR GOTO is located in the program.</td>
      </tr>
      <tr>
        <td>20</td>
        <td>RE</td>
        <td>RESUME Without Error.</td>
      </tr>
      <tr>
        <td>21</td>
        <td>EC</td>
        <td>ERROR with illegal error code argument.</td>
      </tr>
      <tr>
        <td>22</td>
        <td>MO</td>
        <td>Missing Operand</td>
      </tr>
      <tr>
        <td>23</td>
        <td>FN</td>
        <td>For Without Next.</td>
      </tr>
      <tr>
        <td>50</td>
        <td>NU</td>
        <td>Not In Use.</td>
      </tr>
      <tr>
        <td>51</td>
        <td>FM</td>
        <td>Bad File Mode. Trying to INPUT from a file which is OPEN for output (O), or PRINT data to a file OPEN for input (I).</td>
      </tr>
      <tr>
        <td>52</td>
        <td>AO</td>
        <td>Attempt to open a file which is already open. Usually appears after pressing STOP to stop a program using files.</td>
      </tr>
      <tr>
        <td>53</td>
        <td>IO</td>
        <td>Input/Output Error. Cassette not adjusted correctly or bad tape.</td>
      </tr>
      <tr>
        <td>54</td>
        <td>IE</td>
        <td>Input Past End. Attempt to input past the end of a file. Use EOF function to check this does not happen.</td>
      </tr>
      <tr>
        <td>55</td>
        <td>FD</td>
        <td>Bad File Descriptor.</td>
      </tr>
      <tr>
        <td>56</td>
        <td>DS</td>
        <td>Direct Statement. Usually appears if you attempt to LOAD a data file.</td>
      </tr>
      <tr>
        <td>57</td>
        <td>NO</td>
        <td>File Not Open. Input and output to a data file can only take place after OPEN.</td>
      </tr>
      <tr>
        <td>58</td>
        <td>BD</td>
        <td>Bad Data. Caused by trying to read string data into numeric variable.</td>
      </tr>
      <tr>
        <td>59</td>
        <td>IU</td>
        <td>Device In Use.</td>
      </tr>
      <tr>
        <td>60</td>
        <td>DU</td>
        <td>Device Unavailable.</td>
      </tr>
      <tr>
        <td>61</td>
        <td>PP</td>
        <td>Protected Program.</td>
      </tr>
    </informaltable>
  </section>
</article>
