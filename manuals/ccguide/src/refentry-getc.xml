<refentry xmlns="http://docbook.org/ns/docbook" xml:id="getc">
<refnamediv>
<refname>Fgetc</refname>
<refname>Getc</refname>
<refname>Getchar</refname>
<refname>Getw</refname>
<refpurpose>return next character to be read from a file</refpurpose>
</refnamediv>

<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;stdio.h&gt;
</funcsynopsisinfo>

<funcprototype>
  <funcdef>int <function>fgetc</function></funcdef>
  <paramdef>FILE *<parameter>fp</parameter></paramdef>
</funcprototype>
<funcprototype>
  <funcdef>int <function>getc</function></funcdef>
  <paramdef>FILE *<parameter>fp</parameter></paramdef>
</funcprototype>
<funcprototype>
  <funcdef>int <function>getchar</function></funcdef>
  <void/>
</funcprototype>
<funcprototype>
  <funcdef>int <function>getw</function></funcdef>
  <paramdef>FILE *<parameter>fp</parameter></paramdef>
</funcprototype>
</funcsynopsis>

</refsynopsisdiv>

<refsect1><title>Description</title>
<para>
Getc returns the next character from the file pointed to by <quote>fp</quote>.
Fgetc is a synonym for getc defined as a preproccessor substitution.
</para>
<para>
Getchar is equivalent to <quote>getc(stdin)</quote>.
</para>
<para>
Getw returns the next two bytes from the file as an integer.
</para>
<para>
Under OS-9 there is a choice of service requests to use when
reading from a file. <quote>Read()</quote> will get characters up to a
specified number in <quote>raw</quote> mode i.e. no editing will take
place on the input stream and the characters will appear to the
program exactly as in the file. <quote>Readln()</quote>, on the other
hand, will honor the various mappings of characters
associated with a Serial Character device such as a terminal
and in any case will return to the caller as soon as a carriage
return is seen on the input.
</para>
<para>
In the vast majority of cases, it is preferable to use
<quote>readln()</quote> for accessing Serial Character devices and <quote>read()</quote>
for any other file input. <quote>Getc()</quote> uses this strategy and, as
all file input using the Standard Library functions is routed
through <quote>getc()</quote>, so do all the other input functions. The
choice is made when the first call to <quote>getc()</quote> is made after
the file has been opened. The system is consulted for the
status of the file and a flag bit is set in the file structure
accordingly. The choice may be forced by the programmer by
setting the relevant bit before a call to <quote>getc()</quote>. The flag
bits are defined in <quote>&lt;stdio.h&gt;</quote> and <quote>_SCF</quote> and <quote>_RBF</quote> and the
method is as follows: assuming that the file pointer for the
file, as returned by <quote>fopen()</quote> is <varname>f</varname>,
<programlisting>
         f->_flag |= _SCF;
</programlisting>
will force the use of <quote>readln()</quote> on input and
<programlisting>
         f->_flag |= _RBF;
</programlisting>
will force the use of <quote>read()</quote>. This trick may be played on
the standard streams <quote>stdin</quote>, <quote>stdout</quote> and <quote>stderr</quote> without the
need for calling <quote>fopen()</quote> but before any input is requested
from the stream.
</para>
</refsect1>

<refsect1><title>Diagnostics</title>
<para>
EOF(-1) is returned for end of file or error.
</para>
</refsect1>

<refsect1><title>See Also</title>
<para>
<link linkend="putc">Putc()</link>,
<link linkend="fread">fread()</link>,
<link linkend="fopen">fopen()</link>,
<link linkend="gets">gets()</link>,
<link linkend="ungetc">ungetc()</link>
</para>
</refsect1>

</refentry>
