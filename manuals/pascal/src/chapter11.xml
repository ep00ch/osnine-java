<?xml version="1.0"?>
<chapter xmlns="http://docbook.org/ns/docbook">
  <title>Run-time Options</title>
  <para>Programs produced by OS-9 Pascal accept an optional set of run
  time options on their command lines. These options control the way
  certain functions are handled while programs are being executed. Because
  the Pascal compiler is written in Pascal, these options also can be
  used to affect its execution.</para>
  <para>When a compiled Pascal program is run, any combination of the
  options described in this section can be given on the command line
  used to run the program. These options are mostly handled by the
  <quote>support</quote> package, so the option apply both to P-code and native code
  programs.</para>
  <para>If more than one option is specified, each option after the first
  must be separated from its predecessor by spaces and/or commas. If
  an option is specified twice, the last or rightmost specifications is
  used. If any errors are detected while scanning the option list, the
  program will be aborted. Upper and lower case letters are considered
  to be equivalent. For any option which allows a '+' or '-' modifier,
  the option will be accepted without the modifier and will be treated
  as if it had a '+' modifier.</para>
  <para>Those options which have number (memory size) parameters can
  be given either a decimal number in the range of 1 to 65535, or a
  decimal number in the range of 1 to 63 followed by the letter <quote>k</quote> in
  which case the decimal number will be multiplied by 1024 to get the
  equivalent number of <quote>KBytes</quote>. An error message will be generated if
  any individual number is greater than 65535 or if the sum of the <quote>l</quote>
  and <quote>e</quote> values is greater than 65535.</para>
  <para>These options determine various modes in effect at the time the
  program is started. The Pascal standard library includes procedures
  that can override the initial options and change modes under program
  control. In other words, options remain in effect until explicitly
  changed by the program. See Chapter 7 for detailed descriptions of
  these standard procedures.</para>
  <para>Some example are:</para>
  <para>Using Pcodefile and interpreters:</para>
  <programlisting>
Pascaln Pcodef l10000 e500 j- i+
Pascals Pcodef L10000,E500 S20k i+
</programlisting>
  <para>Using fully translated programs:</para>
  <programlisting>
PgName j+ i+ a- #20k
PgName r+, h10, r+ #10k
</programlisting>
  <variablelist>
    <varlistentry>
      <term>j+  (default)</term>
      <term>j-</term>
      <listitem>
        <para>"<option>j+</option>" sets the  right  justification mode, and <quote><option>j-</option></quote> sets the left justification mode for writing strings. This option exists because of a difference between the ISO specification which calls for right justification,  and the original Wirth/Jensen specification which call for left justification. We have allowed OS-9 Pascal to work either way to aid in program portability.</para>
        <para>For example, if a write statement were used to put the string variable <quote>STR1</quote>, an array of 20 characters, into a field with a width of 30 characters as in:</para>
        <programlisting>write(str1:30);</programlisting>
        <para>then 10 leading spaces would be written before the 20 character string. Strings which are written with width specifications that are wider than the string itself will be right justified within the field. This is how the ISO specification says how strings should be written. This options sets the default start up mode for string handling. The standard procedure RIGHTJUST can be used to change this option within a program.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>m+  (default)</term>
      <term>m-</term>
      <listitem>
        <para>This option controls how the MOD function works and also exists due to differences between ISO and Wirth/Jensen specifications. We have allowed OS-9 Pascal to work either way to aid in program portability.</para>
        <para>"<option>m+</option>" directs Pascal to use the MOD algorithm as described in the ISO specification. The right argument must be a positive number and only a positive result or zero can be returned.</para>
        <para>"<option>m-</option>" directs Pascal to use the classic MOD algorithm which returns the signed remainder after performing signed division.</para>
        <para>The standard procedure ISOMOD can be used to change this option within a program.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>a+  (default)</term>
      <term>a-</term>
      <listitem>
        <para>This option sets the default mode for arithmetic error handling.</para>
        <para>"<option>a+</option>" directs Pascal to abort the program and issue an error message if any arithmetic errors are detected. Arithmetic errors include overflow, divide by zero, and out of range arguments for mathematical standard functions.</para>
        <para>"<option>a-</option>" directs Pascal to not abort the program or issue any error message if any arithmetic errors are detected. For integer overflow errors, the least significant 16 bits of the result are retained. For real, overflow and underflow indeterminant results are retained. Divide by zero errors will return a zero result. Invalid function arguments will cause indeterminant results. This option is useful for programs which need to implement their own method of arithmetic checking or for performing algorithms which depend on residue results such as power congruence methods.</para>
        <para>The standard procedure MATHABORT can be used to change this option within a program.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>r+</term>
      <term>r- (default)</term>
      <listitem>
        <para>This option directs Pascal to retain heap memory (<option>r+</option>) obtained by the NEW procedure after the RELEASE standard procedure frees it, or to call OS-9 to return heap memory (<option>r-</option>) after RELEASE calls.</para>
        <para>Use of the <quote><option>r+</option></quote> option, when it is anticipated that more heap memory will be required later, will improve program efficiency since there will be fewer calls made to OS-9 to request memory. In a multi-tasking environment this option can also be useful because it can guarantee memory will be available later.  See also <quote><option>h</option></quote> option below.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>i+</term>
      <term>i-  (default)</term>
      <listitem>
        <para>The <quote><option>i+</option></quote> option tells Pascal to generate a memory statistics report. <quote><option>i-</option></quote>  inhibits generation of the memory statistics report.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>l &lt;number&gt;</term>
      <listitem>
        <para>This option  overrides  the default startup memory size for the local variable stack, which is used for all procedure and function variable storage. The stack is otherwise given a size based on the compiler's automatic estimate. This option is generally used with highly recursive programs that may need more variable size than usual. This option applies only to the PascalS and PascalN interpreters; stack size for pure native code procedure produced by PascalT are controlled by the OS-9 Shell <quote><option>#</option></quote> memory size option.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>e &lt;number&gt;</term>
      <listitem>
        <para>This option overrides the default startup memory size for the extended stack, which is used for internal variables and variables used by native-code procedures declared in EXTERNAL statements. This option applies only to the PascalS and PascalN interpreters; extended stack size for pure  native  code procedure produced by PascalT are controlled by the OS-9 Shell <quote><option>#</option></quote> memory size option.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>h &lt;number&gt;</term>
      <listitem>
        <para>Specifies the minimum amount of heap memory to be initially reserved for a program. Heap memory is used for dynamic data structures via the NEW, MARK, and RELEASE standard procedures (see Chapter 7). This minimum memory will be retained throughout the execution of the program. If more heap space is required, Pascal will request it from OS-9.  See also <quote><option>r</option></quote> option.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>s &lt;number&gt;</term>
      <listitem>
        <para>Specifies the size of the virtual code swapping area to be allocated. This option only applies to PascalS, the swapping P-code interpreter. The swapping area should be as large as possible to increase program execution speed (See Chapter 3 regarding PascalS and its virtual swapping system).</para>
        <para>The effect of the '<option>s</option>' option is described in the chapter on running user programs under the interpreters.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <para>Finally  you  should  note  that some of the run time options are invalid or have no effect for some of the OS-9 Pascal products. The Pascal compiler itself, for instance, uses a highly specialized version of the virtual code swapping interpreter, and any attempt to specify the '<option>j</option>', '<option>m</option>', or  '<option>a</option>' options will be flagged as an error. Also, any program which runs completely in native code, that is, it is not a pcode or a hybrid of pcode/native code, ignores any values supplied for the '<option>l</option>' or '<option>e</option>' options. Furthermore, purely native code programs cannot derive any significant number for the number of bytes of free heap memory on the memory statistics report. For pure native code programs, the effect of the '<option>l</option>' and '<option>e</option>' options is provided by the '<option>#</option>' option on the SHELL command line. See the OS-9 user and system manuals for more discussion of SHELL and its options.</para>
</chapter>
