<?xml version="1.0"?>
<chapter xmlns="http://docbook.org/ns/docbook">
  <title>Run-time Error Handling</title>
  <para>If during program execution an error occurs which causes your program to abort, the following type of error message is written to the system error path:</para>
  <screen>
PASCAL ERROR #w
(error message text)
PROCEDURE #x0
PROCEDURE #x1
   .
   .
PROCEDURE #xn
LINE NUMBER=y
PCODE LOCATION=z
</screen>
  <para>where:</para>
  <para><quote>w</quote> is the error number that occurred. Error numbers less than 100 generally refer to I/O errors where other numbers generally refer to process errors.</para>
  <para><quote>error message text</quote> Is the text of the message
  taken from the <filename>PASCALERRS</filename> file. If the
  <filename>PASCALERRS</filename> file cannot be opened, or if the
  appropriate text cannot be found, this line will be omitted. If the
  error is an I/O error, a second line will usually be displayed giving
  an OS-9 error message relating to the I/O error.</para>
  <para>x0, x1, ..., xn is an unlinking of the procedure call nesting. It
indicates that procedure number <quote>x0</quote> was executing when the error
occurred, and the <quote>x0</quote> was called by <quote>x1</quote> and so on until <quote>xn</quote> is
found which is the first procedure number which began execution.
The <quote>x</quote> numbers refer to procedure numbers as shown in the procedure
table list (see Chapter 2), Procedure number <quote>xn</quote> should always be
zero if the stack hasn't been destroyed. The same procedure number can
appear several times in the list if recursion has occurred. If a native
code procedure is part of the call nesting, it will show up as procedure
number 255 regardless of which native code procedure it might be; native
code procedures lose their numeric identity as part of the requirement
to be a native code procedure. If execution hasn't proceeded far enough
for a call stack, to be built, or if the call stack is invalid, either no
unlinking will be shown, or the unlinking may show meaningless procedure
numbers.</para>
  <para><quote>y</quote> is the line number of the source program where the error
occurred. If the source line number begins with the keyword <quote>END</quote> or
"ELSE", it is possible that the error really occurred in the code for
the next previous significant source line, or that the error really
occurred in the termination code for whatever type of compound statement
that the <quote>END</quote> or <quote>ELSE</quote> terminates. This error line is only given if
you have enabled the inclusion of source line numbers in the source
program (see Chapter 2). As with the previous error lines, this line
is reported only if execution has proceeded far enough for a valid
line number to be known. Also, if line number inclusion is selectively
enabled and disabled within the source program, this error line shows
the last known source line number.</para>
  <para><quote>z</quote> is the P-code location within procedure <quote>x0</quote> which was
being executed when the error occurred. Where the line number message
can quickly get you to the vicinity of the problem statement, the
P-code location can give you an idea as to where within a statement
the problem occurred. As with the previous error lines, this line is
reported only if execution has proceeded far enough for a valid P-code
location to be known. Furthermore, there are several errors which can
occur for which the P-code location information gets lost, in which
case this line will not appear. Most notably, many I/O errors and the
address multiply overflow error cause the P-code location information
to be unknown at error reporting time. Programs which are in their
initial stages of testing should probably cause line numbers to be
included in the P-code file to aid in debugging and testing. As the
program becomes more reliable and error free, you might inhibit line
number inclusion to achieve slightly enhanced execution and memory
efficiency - relying solely on the P-code location report for further
debugging purposes.</para>
  <para>Most abort errors are broken up into two classes: input/output
(I/O) and mathematical. If an abort error is in one of these two
classes, it's abortive power can be disabled via either the IOABORT
or the MATHABORT standard procedures. The standard functions IORESULT
and MATHRESULT are provided so that you can deal with such errors
within the program. Some programmers believe that you should never
disable system checks for I/O or math errors. If you are one of these,
then simply do not use any of the above named standard procedures. If,
however, you are of the philosophy that production programs should be
written with the idea that they should never be aborted by the system
no matter what garbage the user feeds to the program, that the program
should intelligently report the nature of the erroneous input, and,
if necessary, gracefully shut down, then the above standard functions
and procedures can be of great benefit. See the chapter on standard
functions and procedures for more information on these routines.</para>
  <para>There are, however, a few errors which always unconditionally
abort your program. A case select error is one. This error occurs when
a case statement is executed but there is no statement which has a
constant selection list containing the required selection value. For example:</para>
  <figure>
    <title>A Code Example Which Would Produce a Case Error.</title>
    <programlisting>
i:=5;
CASE i OF
   0, 7: DoThisStatement;
   1..4: DoAnotherStatement
END; { CASE }
</programlisting>
  </figure>
  <para>would cause a run time abort since the actual value of variable
  <quote><varname>i</varname></quote>, which is 5 in this case, does
  not appear in any constant selection list. One of two actions can be
  taken to prevent this type of error &#x2014; either make sure that all
  possible values of the selecting expression are accounted for in the
  constant selection  lists, or use the OTHERWISE case statement option
  as in:</para>
  <figure>
    <title>A Coding Example Which Eliminates the Case Error by Using the <quote>OTHERWISE</quote> Case Option.</title>
    <programlisting>
i:= 5;
CASE i OF
   0, 7: DoThisStatement;
   1..4: DoAnotherStatement;
   OTHERWISE: BEGIN
              ReportError(i);
              GOTO EndOfProgram
              END
END; { CASE }
</programlisting>
  </figure>
  <para>See the chapter on deviations and enhancements from ISO7185.1
  for more discussion of the OTHERWISE option. Stack and heap overflow
  errors also unconditionally abort a program. Use of run time options
  can eliminate such errors, as is explained in the chapter on run time
  options. Address multiply overflow errors also unconditionally abort
  a program, but this, along with any other unconditionally aborting
  errors, can be avoided by good programming practices. The <application>OS-9 Pascal</application>
  system is intended to provide the ability to write programs which
  are as user friendly and user tolerant as possible and those errors
  remaining which always unconditionally abort a program do so because
  it is not feasible to intelligently recover from the error condition
  and continue with the program execution.</para>
  <para>When using IOABORT and MATHABORT it is best to disable the abort
  process for the smallest range of code necessary. For example:</para>
  <figure>
    <title>Code Example Using the Standard Procedure <quote>IOABORT</quote>.</title>
    <programlisting>
ioabort(f, false);
reset(f, 'INPUTFILE');
ioabort(f, true);
i:=ioresult(f);
</programlisting>
  </figure>
  <para>is a good way to check if a file already exists. If the file
  doesn't exist, variable <quote><varname>i</varname></quote> will contain
  the number 216 which is the OS-9 error number for an attempt to open a
  nonexistent file. If no errors were encountered while trying to open
  the file, variable <quote><varname>i</varname></quote> will contain
  the number 0. Remember that if multiple errors are encountered for a
  file between the IOABORT call which disables the abort process and the
  IOABORT call which re-enables the abort process, only the first error
  number is returned - the others are lost. The opposite holds true for
  math errors - only the last error number is retained, the others are
  lost. For example:</para>
  <figure>
    <title>Code Example Using the Standard Procedure <quote>MATHABORT</quote>.</title>
    <programlisting>
mathabort(false);
i:=32767+16000*16000+2;
mathabort(true);
j:=mathresult;
</programlisting>
  </figure>
  <para>will set the variable <quote><varname>j</varname></quote>
  to number 199, indicating an integer overflow on add, subtract, or
  negate. The error caused by the integer overflow for the multiply is
  lost since the add operation which also caused an overflow occurred
  last. If, in the above example, the multiplication overflow caused the
  modulus result which is retained to be a negative number, it is likely
  that no overflow on add, subtract, or negate would have occurred. In
  that case, the variable <quote><varname>j</varname></quote> would be
  set to the number 184, indicating a multiplication overflow. Bear
  in mind the possible combination of events which can occur and the
  possible results for all such combinations when using IORESULT and
  MATHRESULT. Remember, also, that each time you call either IORESULT or
  MATHRESULT that the error number for the appropriate file or for the
  mathematical result is reset to zero. You must save a copy of the error
  number from the last call if you intend to use it more than once.</para>
</chapter>
