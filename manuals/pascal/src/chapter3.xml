<?xml version="1.0"?>
<chapter xmlns="http://docbook.org/ns/docbook">
  <title>The P-code Interpreters</title>
  <abstract>
    <para>SYNOPSIS: Compiled Pascal programs in P-code form can be interpretively executed using either <quote>PascalN</quote>, the normal interpreter, or <quote>PascalS</quote>, a swapping (or <quote>virtual memory</quote>) interpreter which can run very large programs.</para>
  </abstract>
  <sect1>
    <title>About The P-code Interpreters</title>
    <para>After you have successfully compiled your Pascal program, you can run it using a <quote>P-code</quote> interpreter. It reads the P-code representation written by the compiler on the <quote>PCODEF</quote> (or other name you may have given) and executes the Pascal program. It also includes special features so that if an error occurs when the program is running, the type of error, the name of the offending procedure, and the corresponding source program statement line can be identified.</para>
    <para>The OS-9 Pascal System includes two different P-code interpreters: PascalN which is the normal interpreter, and PascalS which is the swapping or <quote>virtual memory</quote> interpreter. PascalN is preferred for running most programs because it is fastest. PascalS is used only in cases where the compiled program is too large to fit in your computer's memory.</para>
    <para>Calling the interpreter is simple: you just type its name followed by the name of the pcode file which is to be executed. For example:</para>
    <screen>
pascaln pcode_filename
pascals pcode_filename
</screen>
    <para>In the above example <quote>pcode_filename</quote> may be either the name of a pcode file in the current data directory or a pathlist to a pcode file in another directory.</para>
  </sect1>
  <sect1>
    <title>A Detailed Description of P-code Interpreter Command Lines</title>
    <para>The OS-9 command line used to call PascalN or PascalS can contain one or more of the following options:</para>
    <orderedlist numeration="arabic" spacing="compact">
      <listitem>
        <para>Run time options</para>
      </listitem>
      <listitem>
        <para>A parameter string to be passed to the Pascal program</para>
      </listitem>
      <listitem>
        <para>Standard I/O redirection</para>
      </listitem>
    </orderedlist>
    <para>The format for PascalN or PascalS   command lines are:</para>
    <para>OS9:PascalN  Pcodefile   [Run-Time Options] [: Params]</para>
    <para>OS9:PascalS  Pcodefile   [Run-Time Options] [: Params]</para>
    <para>Items enclosed in <quote>[</quote> and  <quote>]</quote>  are   optional.</para>
  </sect1>
  <sect1>
    <title>Standard I/O Paths</title>
    <para>The three standard I/O paths associated  with  any OS-9
    program are also used by the interpreters. The OS-9 paths for
    standard input, standard output, and standard error/status are
    associated with Pascal's built-in standard files called <quote>INPUT</quote>,
    <quote>OUTPUT</quote>, and <quote>SYSERR</quote>, These three files are always automatically
    opened by the P-code interpreter for use by your Pascal program. If
    the command line that called the interpreter did not redirect I/O,
    the default paths used are usually the user's terminal.</para>
    <para>The standard file, INPUT, is opened for reading, the standard file, OUTPUT, is opened for writing, and the standard file, SYSERR, is opened in update (read and write) mode. These files can be used for interactive input/output or to access mass storage files. Some examples of calling the interpreters with I/O redirection are:</para>
    <screen>pascals  &lt;/d0/user5/indata s20k &gt;/P</screen>
    <screen>pascaln  &lt;/t2 &gt;/t2 &gt;&gt;/t2 L10000   E4000</screen>
    <screen>pascals  &gt;/dl/reports/printfile   S10k E1000</screen>
    <para>For more information, see pages 4-8 and 8-2.</para>
  </sect1>
  <sect1>
    <title>Run-Time Options</title>
    <para>The interpreter command line can optionally include a  list  of run-time options which affect the interpreter performance and statistics reporting. They generally define memory allocation sizes, and/or they enable generation of the memory statistics report. The use of virtual code swapping buffers, which can be affected by these parameters, is discussed below. For more information about these options, refer to Chapter 11.</para>
    <para>When using the PascalN and PascalS interpreters, the shell's <quote>#memsize</quote> directive has no affect on memory allocated. Memory allocation may be specified using one of two methods. The first is by using the compile time options to embed the requests in the code. This is particularly useful when making a program in Pcode form easy to run for users unfamiliar with all of Pascal's run-time options. The memory is allocated automatically, without user intervention, when initially requested through the compile time method. The second method is to use the run-time options to request memory from the command line.</para>
    <para>There are a number of run-time memory allocation options which may be specified when using either of the interpreters to execute a program in pcode form. The options are used to control allocation of memory for the LOCAL STACK area, the EXTENDED STACK area, the initial HEAP STORAGE area, and when using PascalS, the SWAP BUFFER area. A single character is used to select one of the memory areas. The selecting character is then followed by an integer value representing the amount of memory you wish to allocate to that area. The integer values may be in one of two forms.</para>
    <orderedlist numeration="arabic">
    <listitem><para>0  to 65535    Byte sizes</para></listitem>
    <listitem><para>0K to 63K    KByte sizes  (1K equals 1024 bytes)</para></listitem>
    </orderedlist>
    <para>The selector character and the memory areas they set are shown below along  with  a  brief  description of their usage. For more detailed information on the individual memory  areas  see chapter 10.</para>
    <informaltable frame="none" colsep="0" rowsep="0">
      <tgroup cols="2">
        <colspec colwidth="2in" colname="c1"/>
        <colspec colwidth="2in" colname="c2"/>
        <tbody>
          <row>
            <entry><quote>L</quote> or <quote>l</quote></entry>
            <entry>LOCAL STACK</entry>
          </row>
          <row>
            <entry><quote>E</quote> or <quote>e</quote></entry>
            <entry>EXTENDED STACK</entry>
          </row>
          <row>
            <entry><quote>H</quote> or <quote>h</quote></entry>
            <entry>DYNAMIC HEAP</entry>
          </row>
          <row>
            <entry><quote>S</quote> or <quote>s</quote></entry>
            <entry>SWAP BUFFERS</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>Some examples of Run-time Options are:</para>
    <screen>
PascalN pcodef L10000 E500
PascalN pcodef e300 h200 L400
PascalS pcodef L1000 S20K H1000
</screen>
  </sect1>
  <sect1>
    <title>The Parameter String</title>
    <para>The command line can optionally include a string of up to 80 characters, which will be made available to the running program in a special array  called  'SYSPARAM'. The option can be used to pass to your Pascal program information such as initialization values, file names, etc.</para>
    <para>NOTE: This is a feature of OS-9 Pascal and is not a standard Pascal function.</para>
    <para>The array in which this data is passed to the program is predefined as:</para>
    <programlisting>sysparam : ARRAY [0..79] OF char;</programlisting>
    <para>The program can access sysparam as if it were specifically defined. The parameter string  <emphasis>must</emphasis>  begin with a <quote>:</quote> character (which is not passed to the program) followed by up to 80 characters. Extra characters are ignored. If less than 80 characters are given, or no parameter string is given, space characters will be supplied to fill out the array. The parameter string <emphasis>cannot</emphasis>  include control characters or any of the characters that have special meaning to the OS-9 Shell ( &lt; &gt; # ; or !  ).  Here are examples:</para>
    <screen>
pascaln pcodef :this message is passed to the program
pascaln sales.analysis  &gt;/p :Report for Joanie's Boutique
pascals translate :channel5,channel8,noprint
</screen>
  </sect1>
  <sect1>
    <title>Files Used by the Interpreters</title>
    <para>As mentioned previously, the interpreter will read the Pascal program P-code from the filename you specify on the command line. The file <quote><filename>SUPPORT</filename></quote>, which contains the machine language support library  for virtually all parts of the OS-9 Pascal System, is required by PascalN and PascalS and will be automatically loaded from  the current execution directory. You can also preload it using the OS-9 command <quote>load support</quote> to save time if you are constantly using the interpreters.</para>
    <para>The file <quote><filename>PASCALERRS</filename></quote> should also be in the execution directory. <filename>PASCALERRS</filename> contains all of the run-time error message strings. If this file is not found in the execution directory, any run-time error will only print out the error number without the normal accompanying textual description. Also, if <filename>PASCALERRS</filename> is not in the execution directory, the standard procedure SYSREPORT (see the chapter on standard procedures) will not function correctly.</para>
  </sect1>
  <sect1>
    <title>Choosing Between PascalS And PascalN</title>
    <para>PascalN should be used to run P-code programs unless the combined size of the program itself and its data area is too large to fit in the memory available in your system. It runs faster than PascalS and is somewhat smaller.</para>
    <para>PascalS allows you to run much bigger programs in the range of 10,000 plus source statements. In general, the ability of PascalS to run any Pascal program is mostly restricted by the amount of memory required for global and local variable storage. The ability to run very large programs is based on a technique called <quote>virtual code swapping</quote>. The maximum possible size program that PascalS can run is 254 procedures within the outer block; each containing up to 32767 bytes of P-code (approximately 8.3 megabytes), however, this is practically limited by the amount of disk space available.</para>
  </sect1>
  <sect1>
    <title>How Virtual Code Swapping Works</title>
    <para>Despite its intimidating sounding name, the way virtual code swapping works is fairly easy to understand. It is also simple to use, because PascalS does it automatically with almost no special effort on your part. In fact, the main reason its internal operation is described here is so you can understand the factors that affect its efficiency and speed. Virtual code swapping is especially important because two major parts of the OS-9 Pascal System (the compiler and the native code translator) are also P-code programs run on PascalS.</para>
    <para>All P-code programs, whether or not they are to be executed by PascalS, are automatically broken into 256-byte <quote>virtual memory</quote> pages by the compiler. PascalS copies these pages from the PCODEF (or equivalent) file to a temporary disk file. Of course, only one P-code instruction can be executed at a time, so theoretically only the page containing the current instruction must actually be present in <quote>real</quote> memory, and all other pages can remain on the disk until needed. The virtual memory effect is achieved because the disk file containing the virtual pages can be larger than the actual amount of real memory available.</para>
    <para>Because disk read operations take a relatively long time, PascalS attempts to keep as many pages in real memory as possible in an area divided in 256-byte blocks called <quote>swap buffers</quote>. In order to further reduce the number of disk operations necessary, PascalS attempts to keep pages accessed most frequently in the swap buffers. If all, or nearly all, of the pages can fit in the swap buffers at the same time, PascalS can run almost as fast as PascalN. At the other extreme, if a relatively small percentage of the pages fit in the swap buffers, many more disk read operations  will  be needed so PascalS will run slower.</para>
    <para>Putting all this together, it logically follows that the three main factors affecting the speed of PascalS ate:</para>
    <orderedlist numeration="arabic">
      <listitem>
        <para>The number of swap buffers - the more the better.</para>
      </listitem>
      <listitem>
        <para>The ratio of the number of swap buffers to the total number of p-code pages.</para>
      </listitem>
      <listitem>
        <para>The speed (access time) of the disk system.</para>
      </listitem>
    </orderedlist>
    <para>There is always an absolute minimum of 8 swap buffers. Beyond that, the minimum number depends on the use of string constants in the Pascal program because procedures that use string constants have special pages  allocated  in the P-code file to hold the strings. As a procedure executes and makes reference to a string, the code page containing the string must be swapped into memory just like a normal code page. As long as that procedure is still active, that is, until the end of the procedure is reached and a return from procedure sequence is executed, any and all pages of string constants which were swapped in for the procedure must remain locked in memory. If a program were to use no strings at all, that program could be run using only the minimum 8 swap buffers.</para>
    <para>There is an easy method for finding out if there are enough swap buffers available - simply run the program. If there aren't enough swap buffers, PASCALS will give a specific  error  message stating so. The <quote><option>S</option></quote> run-time option can be used to  explicitly assign more swap buffers.</para>
    <para>When allocating swap buffers, you  will  typically find that
    performance goes up in a lumpy fashion as more swap buffers are
    allocated, if, for instance, a program runs in, say, 5 minutes
    with 16 swap buffers, you might find that it runs in 4.5 minutes
    with 18 buffers, 4 minutes with 20 buffers, and 2 minutes  with
    21 buffers. In this case, a threshold is reached between 20 and 21
    buffers. These thresholds are different  for  different  programs
    and possibly for different executions of the same program. They
    depend on the procedure nesting  structure,  P-code sizes of various
    procedures, and which statements are executed in the program. For
    best performance, the rule is to simply allocate as much memory
    as possible for swap buffers.</para>
  </sect1>
</chapter>
