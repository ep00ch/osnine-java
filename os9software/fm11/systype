*
* This systype file is reverse engineered
*
************************************************************
*
*     Dynamic Address Translator Definitions
*
FM11L2 equ 17
CPUType set FM11L2

DAT.BlCt equ 16 D.A.T. blocks/address space
DAT.BlUs equ 16 blocks available for RAM in address space

DAT.TkCt equ 16 task maps in the MMU
DAT.Regs equ $FD80 DAT Block Registers base address
DAT.Task equ $FD90 Task register address
DAT.BlSz equ (256/DAT.BlCt)*256 D.A.T. block size
DAT.ImSz equ DAT.BlCt*2 D.A.T. Image size

***************
*
* DAT.Addr calculates a mask for the top bits of the
* logical address that are mapped by the MMU
DAT.Addr equ -(DAT.BlSz/256) D.A.T. MSB Address bits
*

***************
DAT.Free equ $FE Free Block Number

DAT.BlMx equ $FF maximum block number
DAT.BMSz equ $100 Block Map size (one byte per block)
DAT.WrPr equ 0 no Block Write Protect bit
DAT.WrEn equ 0 no Block Write Enable bit


DAT.Uniq equ 1 bits of DAT Task register are not used for other things

SysTask equ $80

ROMBlock equ $FF The block number for the I/O
IOBlock equ $01 The block number for the I/O

ROMCount equ 1 number of blocks of ROM to so map in
RAMCount equ 1

***************
*
* If the I/O is addressed whenever the top
* address lines of the micro, (ie the logical
* bus), take a certain value, rather than being
* addressed through the DAT, then MappedIO must
* be set false (0)
MappedIO equ 0
*
***************

ClocType equ 0

 ifne LEVEL-1
 org 1
BlockTyp rmb 1 check only first bytes of RAM block
ByteType rmb 1 check all bytes of RAM
 org 1
Limited rmb 1 check only top 64k for ROM modules
UnLimitd rmb 1 check all NotRAM for modules
* NOTE: The UnLimitd check assumes any NotRAM
*       with a module will always have $87CD
*       as the first two bytes in the block.
 endc

ROMCheck equ UnLimitd check all NotRAM
RAMCheck equ BlockTyp check only first bytes of RAM blocks

