* This systype file is reverse engineered
*
 ifne LEVEL-1
 org 1
BlockTyp rmb 1 check only first bytes of RAM block
ByteType rmb 1 check all bytes of RAM
 org 1
Limited rmb 1 check only top 64k for ROM modules
UnLimitd rmb 1 check all NotRAM for modules
* NOTE: The UnLimitd check assumes any NotRAM
*       with a module will always have $87CD
*       as the first two bytes in the block.
 endc

************************************************************
*
*     Dynamic Address Translator Definitions
*
CMS9639 equ 15
CPUType set CMS9639

DAT.BlCt equ 16 D.A.T. blocks/address space
DAT.TkCt equ 128 task maps in the MMU
DAT.Regs equ $F000 DAT Block Registers base address
DAT.Task equ $FFBB Task register address
*DAT.BlSz equ $1000
DAT.BlSz equ (256/DAT.BlCt)*256 D.A.T. block size
DAT.ImSz equ DAT.BlCt*2 D.A.T. Image size
***************
DAT.Free equ $8000 Free Block Number

DAT.BlMx equ $FF maximum block number
DAT.BMSz equ $100 Block Map size (one byte per block)
DAT.WrPr equ 0 no Block Write Protect bit
DAT.WrEn equ 0 no Block Write Enable bit

***************
*
* DAT.Addr calculates a mask for the top bits of the
* logical address that are mapped by the MMU
DAT.Addr equ -(DAT.BlSz/256) D.A.T. MSB Address bits
*

ClocType equ 0

SysTask equ $80 System Task number
*
***************

IOBlock equ $FF The block number for the I/O
ROMBlock equ $FF ROM block
ROMCount equ 0 number of blocks of ROM to so map in
RAMCount equ 2 initial blocks of RAM

ROMCheck equ Limited check only top 64k for ROM
RAMCheck equ BlockTyp check only first bytes of RAM blocks

